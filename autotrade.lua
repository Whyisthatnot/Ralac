getgenv().AutoTrade = {
    ["HannahStr3amRogu3"] = {"Spinosaurus"},
    ["Script"] = [[
    ]]
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PetGiftingService = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("PetGiftingService")

local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local PLACE_ID = 126884695634066
local API_URL = "https://games.roblox.com/v1/games/" .. PLACE_ID .. "/servers/Public?sortOrder=Asc&limit=100"

local request = (syn and syn.request) or http_request or (fluxus and fluxus.request)

local receiver = getgenv().AutoTrade and getgenv().AutoTrade.Receiver
local placeId = game.PlaceId -- ID game hi·ªán t·∫°i

local player = game:GetService("Players").LocalPlayer

local function antiAFK()
	while true do
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
		task.wait(0.1)
		VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
		task.wait(1) -- Th·ª±c hi·ªán m·ªói 30 gi√¢y, c√≥ th·ªÉ thay ƒë·ªïi
	end
end
task.spawn(antiAFK)
local function setupUI()
    pcall(function()
        game:GetService("StarterGui"):SetCore("TopbarEnabled", false)
    end)

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "SimpleDinoUI"
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = player:WaitForChild("PlayerGui")
    screenGui.DisplayOrder = 2147483647
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local bgFrame = Instance.new("Frame")
    bgFrame.Size = UDim2.new(1, 0, 1, 0)
    bgFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    bgFrame.BackgroundTransparency = 1
    bgFrame.BorderSizePixel = 0
    bgFrame.Parent = screenGui

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 8)
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    layout.VerticalAlignment = Enum.VerticalAlignment.Top
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = bgFrame

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 10)
    padding.Parent = bgFrame

    -- Discord Label
    local discordLabel = Instance.new("TextLabel")
    discordLabel.Name = "Discord"
    discordLabel.Size = UDim2.new(1, -60, 0, 60)
    discordLabel.BackgroundTransparency = 1
    discordLabel.Font = Enum.Font.GothamBlack
    discordLabel.TextScaled = true
    discordLabel.TextColor3 = Color3.new(1, 1, 1)
    discordLabel.Text = "discord.gg/chings"
    discordLabel.Parent = bgFrame

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(114, 137, 218)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 100, 150))
    })
    gradient.Parent = discordLabel

    -- Player Name Label
    local playerLabel = Instance.new("TextLabel")
    playerLabel.Name = "PlayerName"
    playerLabel.Size = UDim2.new(1, -60, 0, 50)
    playerLabel.BackgroundTransparency = 1
    playerLabel.Font = Enum.Font.GothamBold
    playerLabel.TextScaled = true
    playerLabel.TextColor3 = Color3.fromRGB(200, 255, 200)
    playerLabel.Text = "üë§ Player: " .. player.Name
    playerLabel.Parent = bgFrame

    -- Auto Trade Label
    local tradeLabel = Instance.new("TextLabel")
    tradeLabel.Name = "AutoTrade"
    tradeLabel.Size = UDim2.new(1, -70, 0, 70)
    tradeLabel.BackgroundTransparency = 1
    tradeLabel.Font = Enum.Font.GothamBold
    tradeLabel.TextScaled = true
    tradeLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
    tradeLabel.Text = "AUTO TRADE"
    tradeLabel.Parent = bgFrame

    -- Line Above Status
    local lineTop = Instance.new("Frame")
    lineTop.Size = UDim2.new(1, -80, 0, 2)
    lineTop.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    lineTop.BorderSizePixel = 0
    lineTop.Parent = bgFrame

    -- Pet Count Label t√°ch ra ngo√†i
    local petCountLabel = Instance.new("TextLabel")
    petCountLabel.Name = "PetCount"
    petCountLabel.Size = UDim2.new(0, 150, 0, 50)  -- K√≠ch th∆∞·ªõc t√πy ch·ªânh
    petCountLabel.Position = UDim2.new(1, -160, 0, 10)  -- G√≥c tr√™n ph·∫£i, c√°ch vi·ªÅn 10px
    petCountLabel.BackgroundTransparency = 1
    petCountLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    petCountLabel.BorderSizePixel = 0
    petCountLabel.Font = Enum.Font.Gotham
    petCountLabel.TextScaled = true
    petCountLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    petCountLabel.Text = "Pets: Loading..."
    petCountLabel.Parent = screenGui  -- <-- ƒê·∫∑t parent tr·ª±c ti·∫øp l√† screenGui
    _G.PetCountLabel = petCountLabel


    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "Status"
    statusLabel.Size = UDim2.new(1, -60, 0, 50)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextScaled = true
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.Text = "Status: Idle"
    statusLabel.Parent = bgFrame
    _G.StatusLabel = statusLabel

    -- Line Below Status
    local lineBottom = Instance.new("Frame")
    lineBottom.Size = UDim2.new(1, -80, 0, 2)
    lineBottom.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    lineBottom.BorderSizePixel = 0
    lineBottom.Parent = bgFrame
end

local function sendReceive()
    local LocalPlayer = Players.LocalPlayer

    local API_URLL = "https://hoangclone.net/api.php"

    -- Ch·ªçn h√†m request t·ª´ executor
    local request = (syn and syn.request) or http_request or (fluxus and fluxus.request)
    if not request then
        warn("‚ùå Executor c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ HTTP request")
        return
    end

    -- G·ª≠i jobId cho API
    local function sendJobId()
        local body = {
            playerName = LocalPlayer.Name,
            jobId = game.jobId
        }

        local success, err = pcall(function()
            return request({
                Url = API_URLL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = game:GetService("HttpService"):JSONEncode(body)
            })
        end)

        if success then
            print("‚úÖ ƒê√£ g·ª≠i JobId:", game.jobId)
        else
            warn("‚ùå L·ªói g·ª≠i JobId:", err)
        end
    end

    sendJobId()
end

local function countAllPets()
    local total = 0
    
    -- ƒê·∫øm trong Backpack
    for _, item in ipairs(Backpack:GetChildren()) do
        if item:IsA("Tool") and string.find(item.Name, "KG") and string.find(item.Name, "Age") then
            total += 1
        end
    end

    -- ƒê·∫øm trong Character (ƒëang c·∫ßm)
    if LocalPlayer.Character then
        for _, item in ipairs(LocalPlayer.Character:GetChildren()) do
            if item:IsA("Tool") and string.find(item.Name, "KG") and string.find(item.Name, "Age") then
                total += 1
            end
        end
    end

    return total
end


-- Function to update pet count display
local function updatePetCount()
    while true do
        local petCount = countAllPets()
        if _G.PetCountLabel then
            _G.PetCountLabel.Text = "Pets: " .. tostring(petCount)
        end
        task.wait(1) -- Update every second
    end
end

setupUI()
task.spawn(updatePetCount)
task.wait(1)

-- ‚úÖ H√†m l·∫•y to√†n b·ªô tool trong Backpack v√† Character
local function getAllTools()
	local tools = {}

	for _, tool in ipairs(Backpack:GetChildren()) do
		if tool:IsA("Tool") then
			table.insert(tools, tool)
		end
	end

	for _, tool in ipairs(LocalPlayer.Character:GetChildren()) do
		if tool:IsA("Tool") then
			table.insert(tools, tool)
		end
	end

	return tools
end

-- ‚úÖ H√†m Teleport t·ªõi ng∆∞·ªùi nh·∫≠n
local function teleportToPlayer(playerName)
	local target = Players:FindFirstChild(playerName)
	if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
		local pos = target.Character.HumanoidRootPart.Position
		local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		if hrp then
			hrp.CFrame = CFrame.new(pos + Vector3.new(0, 3, 0))
		end
	end
end

local function checkServerForStatusTrue()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local success, response = pcall(function()
                return request({
                    Url = "https://hoangclone.net/api.php?type=status&playerName=" .. plr.Name,
                    Method = "GET"
                })
            end)
            if success and response and response.Body then
                local data = HttpService:JSONDecode(response.Body)
                if data.message == "true" then
                    return true  -- c√≥ ng∆∞·ªùi ƒëang nh·∫≠n pet
                end
            end
        end
    end
    return false -- kh√¥ng ai ƒëang nh·∫≠n pet
end



if getgenv().AutoTrade[LocalPlayer.Name] then
    ReplicatedStorage.GameEvents.GiftPet.OnClientEvent:Connect(function(giftUuid, petName, sender)
        print("üéÅ C√≥ y√™u c·∫ßu nh·∫≠n pet:", petName, "t·ª´", sender)

        -- L·∫•y danh s√°ch c√°c t·ª´ kh√≥a ƒë∆∞·ª£c ph√©p cho ch√≠nh t√†i kho·∫£n n√†y
        local allowedKeywords = getgenv().AutoTrade[LocalPlayer.Name]
        local isPetAllowed = false

        -- B·∫Øt ƒë·∫ßu ki·ªÉm tra xem t√™n pet c√≥ ch·ª©a t·ª´ kh√≥a n√†o ƒë∆∞·ª£c ph√©p kh√¥ng
        for _, keyword in ipairs(allowedKeywords) do
            -- D√πng string.find ƒë·ªÉ t√¨m ki·∫øm, :lower() ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            if string.find(petName:lower(), keyword:lower()) then
                isPetAllowed = true -- N·∫øu t√¨m th·∫•y, ƒë√°nh d·∫•u l√† pet h·ª£p l·ªá
                break -- Tho√°t kh·ªèi v√≤ng l·∫∑p v√¨ ƒë√£ t√¨m th·∫•y k·∫øt qu·∫£
            end
        end

        -- D·ª±a v√†o k·∫øt qu·∫£ ki·ªÉm tra ƒë·ªÉ quy·∫øt ƒë·ªãnh Ch·∫•p Nh·∫≠n hay T·ª´ Ch·ªëi
        if isPetAllowed then
            print("‚úÖ Pet h·ª£p l·ªá, ƒëang ch·∫•p nh·∫≠n:", petName)
            _G.StatusLabel.Text = "Status: Accepting "..petName.." from "..sender
            ReplicatedStorage.GameEvents.AcceptPetGift:FireServer(true, giftUuid) -- G·ª≠i true ƒë·ªÉ ch·∫•p nh·∫≠n
        else
            print("‚ùå Pet kh√¥ng h·ª£p l·ªá, ƒëang t·ª´ ch·ªëi:", petName)
            _G.StatusLabel.Text = "Status: Rejecting "..petName.." from "..sender
            ReplicatedStorage.GameEvents.AcceptPetGift:FireServer(false, giftUuid) -- G·ª≠i false ƒë·ªÉ t·ª´ ch·ªëi
        end

        task.wait(3)
        _G.StatusLabel.Text = "Status: Idle" -- Chuy·ªÉn tr·∫°ng th√°i v·ªÅ Idle
    end)
    task.spawn(function()
        sendReceive()
        if not request then
            warn("Executor kh√¥ng h·ªó tr·ª£ HTTP request!")
            return
        end

        local function FindServer(maxPlayers)
            local response = request({
                Url = API_URL,
                Method = "GET",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["User-Agent"] = "Roblox/WinInet"
                }
            })

            if not response or not response.Body then
                warn("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu server.")
                return nil
            end

            local success, data = pcall(function()
                return HttpService:JSONDecode(response.Body)
            end)

            if not success then
                warn("L·ªói parse JSON. N·ªôi dung API tr·∫£ v·ªÅ:")
                print(response.Body) -- In ra ƒë·ªÉ ki·ªÉm tra API tr·∫£ v·ªÅ g√¨
                return nil
            end

            if not data.data then
                warn("Kh√¥ng c√≥ tr∆∞·ªùng 'data' trong JSON.")
                return nil
            end

            for _, server in ipairs(data.data) do
                if server.playing <= maxPlayers and server.id ~= game.JobId then
                    return server.id
                end
            end

            return nil
        end
        while true do
            sendReceive()
            if #Players:GetPlayers() > 4 then
                local hasActiveReceiver = checkServerForStatusTrue()
                if hasActiveReceiver then
                    print("‚ùå C√≥ ng∆∞·ªùi ƒëang nh·∫≠n pet, kh√¥ng hop server")
                else
                    print("üåê Server qu√° ƒë√¥ng, t√¨m server kh√°c...")
                    local serverId = FindServer(2) -- function b·∫°n ƒë√£ c√≥
                    if serverId then
                        TeleportService:TeleportToPlaceInstance(PLACE_ID, serverId, LocalPlayer)
                        task.wait(4)
                        TeleportService:Teleport(placeId, player)

                    else
                        warn("Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p.")
                    end
                end
            else
                print("Server ch∆∞a qu√° ƒë√¥ng, kh√¥ng c·∫ßn chuy·ªÉn")
            end
            task.wait(20)
        end
    end)
	-- T·ª± ƒë√° n·∫øu ƒë·ªß 60 pet
	task.spawn(function()
		while true do
            local count = countAllPets()
            if count >= 60 then
                print("‚ùå Full Pet!")
                LocalPlayer:Kick("Full Pet!")
                break
            end
			task.wait(2)
		end
	end)
-- üì§ Ng∆∞·ªùi g·ª≠i
else-- ‚úÖ Ki·ªÉm tra pet thu·ªôc receiver n√†o trong config m·ªõi
    local function sendStatus(playerName, status)
        if not request then return end
        local body = HttpService:JSONEncode({
            playerName = playerName,
            message = tostring(status)  -- "true" ho·∫∑c "false"
        })
        local success, err = pcall(function()
            request({
                Url = "https://hoangclone.net/api.php?type=status",
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = body
            })
        end)
        if success then
            print("‚úÖ Status '"..tostring(status).."' ƒë√£ g·ª≠i cho", playerName)
        else
            warn("‚ùå L·ªói g·ª≠i status:", err)
        end
    end
    local function getReceiverForPet(tool)
        if not tool:IsA("Tool") then return nil end
        local name = tool.Name:lower() -- ch·ªâ chuy·ªÉn v·ªÅ lowercase

        for receiver, petList in pairs(getgenv().AutoTrade) do
            if receiver ~= "Script" then
                for _, keyword in ipairs(petList) do
                    if string.find(name, keyword:lower()) then
                        print("‚úÖ Pet h·ª£p l·ªá, receiver:", receiver)
                        return receiver
                    end
                end
            end
        end
        return nil
    end




    local function getJobIdFromAPI(playerName)
        if not request then return nil end
        local response = request({
            Url = "https://hoangclone.net/api.php?playerName="..playerName,
            Method = "GET"
        })
        if response and response.StatusCode == 200 then
            local data = HttpService:JSONDecode(response.Body)
            return data.jobId
        end
        return nil
    end
    -- H√†m ki·ªÉm tra xem c√≥ pet h·ª£p l·ªá trong Backpack ho·∫∑c Character kh√¥ng
    local function hasValidPetInInventory()
        local tools = {} 

        -- L·∫•y tool trong Backpack
        for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(tools, tool)
            end
        end

        -- L·∫•y tool trong Character (ƒëang c·∫ßm)
        if LocalPlayer.Character then
            for _, tool in ipairs(LocalPlayer.Character:GetChildren()) do
                if tool:IsA("Tool") then
                    table.insert(tools, tool)
                end
            end
        end

        -- Ki·ªÉm tra t·ª´ng tool v·ªõi config AutoTrade
        for _, tool in ipairs(tools) do
            local receiver = getReceiverForPet(tool)
            if receiver then
                return true -- C√≥ pet h·ª£p l·ªá
            end
        end

        return false -- Kh√¥ng c√≥ pet h·ª£p l·ªá
    end

    if not hasValidPetInInventory() and getgenv().AutoTrade.Script then
        local scriptStr = getgenv().AutoTrade.Script
        local func, err = loadstring(scriptStr)
        if func then
            task.spawn(func)
        else
            warn("‚ùå L·ªói load script AutoTrade:", err)
        end
    end
        
    task.spawn(function()
        local hasTraded = false -- Bi·∫øn ƒë√°nh d·∫•u ƒë√£ trade √≠t nh·∫•t 1 l·∫ßn

        while true do
            local tools = getAllTools()
            local tradedThisRound = false
            local foundValid = false

            print("üîÑ V√≤ng l·∫∑p trade m·ªõi b·∫Øt ƒë·∫ßu. T·ªïng tools:", #tools)

            for _, tool in ipairs(tools) do
                local receiver = getReceiverForPet(tool)
                if receiver then
                    foundValid = true
                    sendStatus(LocalPlayer.Name, true)
                    print("‚úÖ T√¨m th·∫•y pet h·ª£p l·ªá:", tool.Name, "‚Üí receiver:", receiver)

                    if not tradedThisRound then
                        local targetPlayer = Players:FindFirstChild(receiver)
                        if targetPlayer then
                            print("üöÄ ƒêang g·ª≠i pet:", tool.Name, "ƒë·∫øn", receiver)

                            if tool.Parent == Backpack then
                                tool.Parent = LocalPlayer.Character
                                task.wait(0.3)
                                print("üëú Chuy·ªÉn pet t·ª´ Backpack sang Character")
                            end

                            teleportToPlayer(receiver)
                            print("üìç Teleport ƒë·∫øn", receiver)

                            PetGiftingService:FireServer("GivePet", targetPlayer)
                            print("üéÅ ƒê√£ FireServer GivePet cho", receiver)

                            tradedThisRound = true
                            hasTraded = true
                        else
                            local jobId = getJobIdFromAPI(receiver)
                            if jobId then
                                print("üåê Kh√¥ng th·∫•y player, teleport ƒë·∫øn server c·ªßa receiver:", jobId)
                                TeleportService:TeleportToPlaceInstance(game.PlaceId, jobId, LocalPlayer)
                            else
                                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y jobId cho receiver:", receiver)
                            end
                        end
                    end
                end
            end

            if not foundValid then
                sendStatus(LocalPlayer.Name, false)
                _G.StatusLabel.Text = "Status: No pets!"
                print("‚ö†Ô∏è Kh√¥ng c√≤n pet h·ª£p l·ªá, g·ª≠i status false")
            end

            if hasTraded and not foundValid then
                print("‚úÖ ƒê√£ trade h·∫øt pet h·ª£p l·ªá, kick player")
                LocalPlayer:Kick("No more pet!")
                break
            end

            print("‚è± Ch·ªù 10 gi√¢y tr∆∞·ªõc v√≤ng l·∫∑p ti·∫øp theo...")
            task.wait(10)
        end
    end)
end
